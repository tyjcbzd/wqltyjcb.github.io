<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pytorch模型修改</title>
    <link href="/wqltyjcb.github.io/2023/03/31/pytorch%E6%A8%A1%E5%9E%8B%E4%BF%AE%E6%94%B9/"/>
    <url>/wqltyjcb.github.io/2023/03/31/pytorch%E6%A8%A1%E5%9E%8B%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="模型修改，部分参数冻结"><a href="#模型修改，部分参数冻结" class="headerlink" title="模型修改，部分参数冻结"></a>模型修改，部分参数冻结</h1><p>以复现CAM论文中提到的Alex-CAM为例：</p><p>原文如下：</p><blockquote><p>For AlexNet, we removed the layers after conv5 (i.e., pool5 to prob) resulting in a mapping resolution of 13 × 13.</p><p>…</p><p>To each of the above networks, we added a convolutional layer of size 3 × 3, stride 1, pad 1 with 1024 units, followed by a GAP layer and a softmax layer.</p></blockquote><p>简单来说，就是去掉AlexNet中第五个卷积层后面的东西，加上一个<code>3x3</code>卷积，<code>GAP</code>和<code>Linear</code>(注意这里有一个Linear layer！！！)以及<code>Softmax</code>。</p><p>model代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlexNetCAM</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, model, num_classes=<span class="hljs-number">10</span>, init_weights=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-built_in">super</span>(AlexNetCAM, self).__init__()<br>        self.num_classes = num_classes<br>        <span class="hljs-comment"># 删除原来的Pooling layer</span><br>        <span class="hljs-keyword">del</span> model.features[-<span class="hljs-number">1</span>]<br>        self.alex_layer = nn.Sequential(*(<span class="hljs-built_in">list</span>(model.children())[:-<span class="hljs-number">2</span>]))<br>        <span class="hljs-comment"># 原来的层冻结不更新参数</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> self.alex_layer.parameters():<br>             p.requires_grad = <span class="hljs-literal">False</span><br><br>        self.alexcam_layer = nn.Sequential(<br>            <span class="hljs-comment"># -------------------------CAM-----------------------------</span><br>            nn.Conv2d(<span class="hljs-number">256</span>, <span class="hljs-number">1024</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>),  <span class="hljs-comment"># output[256, 13, 13]</span><br>            <span class="hljs-comment"># GAP</span><br>            nn.AdaptiveAvgPool2d((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)),  <span class="hljs-comment"># [1024, 1, 1]</span><br>            nn.Flatten(start_dim=<span class="hljs-number">1</span>),<br>            nn.Linear(<span class="hljs-number">1024</span>, self.num_classes),<br>            nn.Softmax(dim=<span class="hljs-number">0</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.alex_layer(x)<br>        x = self.alexcam_layer(x)<br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h2 id="修改模型结构"><a href="#修改模型结构" class="headerlink" title="修改模型结构"></a>修改模型结构</h2><p>其中下面的代码是分两步删除多余的layers：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> model.features[-<span class="hljs-number">1</span>] <span class="hljs-comment"># 也可以通过赋值一个空的容器的方式实现，比如model.features[-1] = nn.Sequential（）</span><br>    <br>self.alex_layer = nn.Sequential(*(<span class="hljs-built_in">list</span>(model.children())[:-<span class="hljs-number">2</span>]))<br></code></pre></td></tr></table></figure><p>为什么要分两步呢？</p><p>看下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> models<br><br>net = models.alexnet()<br><span class="hljs-built_in">print</span>(net._modules)<br><br></code></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">OrderedDict([(<span class="hljs-string">&#x27;features&#x27;</span>, Sequential(<br>  (<span class="hljs-number">0</span>): Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>, kernel_size=(<span class="hljs-number">11</span>, <span class="hljs-number">11</span>), stride=(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>), padding=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>  (<span class="hljs-number">1</span>): ReLU(inplace=<span class="hljs-literal">True</span>)<br>  (<span class="hljs-number">2</span>): MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">0</span>, dilation=<span class="hljs-number">1</span>, ceil_mode=<span class="hljs-literal">False</span>)<br>  (<span class="hljs-number">3</span>): Conv2d(<span class="hljs-number">64</span>, <span class="hljs-number">192</span>, kernel_size=(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), stride=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), padding=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>  (<span class="hljs-number">4</span>): ReLU(inplace=<span class="hljs-literal">True</span>)<br>  (<span class="hljs-number">5</span>): MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">0</span>, dilation=<span class="hljs-number">1</span>, ceil_mode=<span class="hljs-literal">False</span>)<br>  (<span class="hljs-number">6</span>): Conv2d(<span class="hljs-number">192</span>, <span class="hljs-number">384</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), stride=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), padding=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>  (<span class="hljs-number">7</span>): ReLU(inplace=<span class="hljs-literal">True</span>)<br>  (<span class="hljs-number">8</span>): Conv2d(<span class="hljs-number">384</span>, <span class="hljs-number">256</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), stride=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), padding=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>  (<span class="hljs-number">9</span>): ReLU(inplace=<span class="hljs-literal">True</span>)<br>  (<span class="hljs-number">10</span>): Conv2d(<span class="hljs-number">256</span>, <span class="hljs-number">256</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), stride=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), padding=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>  (<span class="hljs-number">11</span>): ReLU(inplace=<span class="hljs-literal">True</span>)<br>  (<span class="hljs-number">12</span>): MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">0</span>, dilation=<span class="hljs-number">1</span>, ceil_mode=<span class="hljs-literal">False</span>)<br>)), (<span class="hljs-string">&#x27;avgpool&#x27;</span>, AdaptiveAvgPool2d(output_size=(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>))), <br> (<span class="hljs-string">&#x27;classifier&#x27;</span>, Sequential(<br>  (<span class="hljs-number">0</span>): Dropout(p=<span class="hljs-number">0.5</span>, inplace=<span class="hljs-literal">False</span>)<br>  (<span class="hljs-number">1</span>): Linear(in_features=<span class="hljs-number">9216</span>, out_features=<span class="hljs-number">4096</span>, bias=<span class="hljs-literal">True</span>)<br>  (<span class="hljs-number">2</span>): ReLU(inplace=<span class="hljs-literal">True</span>)<br>  (<span class="hljs-number">3</span>): Dropout(p=<span class="hljs-number">0.5</span>, inplace=<span class="hljs-literal">False</span>)<br>  (<span class="hljs-number">4</span>): Linear(in_features=<span class="hljs-number">4096</span>, out_features=<span class="hljs-number">4096</span>, bias=<span class="hljs-literal">True</span>)<br>  (<span class="hljs-number">5</span>): ReLU(inplace=<span class="hljs-literal">True</span>)<br>  (<span class="hljs-number">6</span>): Linear(in_features=<span class="hljs-number">4096</span>, out_features=<span class="hljs-number">1000</span>, bias=<span class="hljs-literal">True</span>)<br>))])<br></code></pre></td></tr></table></figure><p>从上面可以看出输出为一个<code>OrderedDict</code>，<code>Dict</code>包含3个部分:</p><p>通过<code>del model.features[-1]</code>删除Sequential中的<code>MaxPool2d</code>，通过<code>self.alex_layer = nn.Sequential(*(list(model.children())[:-2]))</code>删除<code>classifier</code>部分。</p><h2 id="冻结部分参数并验证"><a href="#冻结部分参数并验证" class="headerlink" title="冻结部分参数并验证"></a>冻结部分参数并验证</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 原来的层冻结不更新参数</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> self.alex_layer.parameters():<br>             p.requires_grad = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>上面的代码可以冻结预训练好的参数。怎么验证是否冻结呢？</p><p>可以使用下面的测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    x = torch.randn((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>))<br>    model = models.alexnet(pretrained = <span class="hljs-literal">True</span>)<br>    net = AlexNetCAM(model)<br><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> net.named_parameters():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(k, v.requires_grad))<br></code></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">alex_layer<span class="hljs-number">.0</span><span class="hljs-number">.0</span>.weight: <span class="hljs-literal">False</span><br>alex_layer<span class="hljs-number">.0</span><span class="hljs-number">.0</span>.bias: <span class="hljs-literal">False</span><br>alex_layer<span class="hljs-number">.0</span><span class="hljs-number">.3</span>.weight: <span class="hljs-literal">False</span><br>alex_layer<span class="hljs-number">.0</span><span class="hljs-number">.3</span>.bias: <span class="hljs-literal">False</span><br>alex_layer<span class="hljs-number">.0</span><span class="hljs-number">.6</span>.weight: <span class="hljs-literal">False</span><br>alex_layer<span class="hljs-number">.0</span><span class="hljs-number">.6</span>.bias: <span class="hljs-literal">False</span><br>alex_layer<span class="hljs-number">.0</span><span class="hljs-number">.8</span>.weight: <span class="hljs-literal">False</span><br>alex_layer<span class="hljs-number">.0</span><span class="hljs-number">.8</span>.bias: <span class="hljs-literal">False</span><br>alex_layer<span class="hljs-number">.0</span><span class="hljs-number">.10</span>.weight: <span class="hljs-literal">False</span><br>alex_layer<span class="hljs-number">.0</span><span class="hljs-number">.10</span>.bias: <span class="hljs-literal">False</span><br>alexcam_layer<span class="hljs-number">.0</span>.weight: <span class="hljs-literal">True</span><br>alexcam_layer<span class="hljs-number">.0</span>.bias: <span class="hljs-literal">True</span><br>alexcam_layer<span class="hljs-number">.3</span>.weight: <span class="hljs-literal">True</span><br>alexcam_layer<span class="hljs-number">.3</span>.bias: <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>可以看到只有预训练的层被冻结了</p><h2 id="除此之外，下面有一些对模型修改的其他操作（以VGG16为例）"><a href="#除此之外，下面有一些对模型修改的其他操作（以VGG16为例）" class="headerlink" title="除此之外，下面有一些对模型修改的其他操作（以VGG16为例）"></a>除此之外，下面有一些对模型修改的其他操作（以VGG16为例）</h2><h3 id="添加层"><a href="#添加层" class="headerlink" title="添加层"></a>添加层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-comment"># 加载预训练网络模型</span><br>vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>) <br><br> <span class="hljs-comment"># 在module外增加一个Linear</span><br>vgg16.add_module(<span class="hljs-string">&quot;add_linear_end&quot;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>)) <br><br><span class="hljs-comment"># 在module内增加一个Linear</span><br>vgg16.classifier.add_module(<span class="hljs-string">&quot;add_linear&quot;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>)) <br></code></pre></td></tr></table></figure><h3 id="修改层，方式一：知道输入特征维度"><a href="#修改层，方式一：知道输入特征维度" class="headerlink" title="修改层，方式一：知道输入特征维度"></a>修改层，方式一：知道输入特征维度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">vgg16.classifier[<span class="hljs-number">6</span>] = nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>) <span class="hljs-comment"># (3)</span><br></code></pre></td></tr></table></figure><h3 id="修改层，方式二：不用查，直接代码获得输入特征维度"><a href="#修改层，方式二：不用查，直接代码获得输入特征维度" class="headerlink" title="修改层，方式二：不用查，直接代码获得输入特征维度"></a>修改层，方式二：不用查，直接代码获得输入特征维度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">num_fc = vgg16.classifier[<span class="hljs-number">6</span>].in_features <span class="hljs-comment">#读取输入特征的维度</span><br><br>vgg16.classifier[<span class="hljs-number">6</span>] = nn.Linear(num_fc,<span class="hljs-number">2</span>) <span class="hljs-comment">#修改最后一层的输出维度，即分类数 (4)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Grad-CAM代码解读</title>
    <link href="/wqltyjcb.github.io/2023/03/27/Grad-CAM%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <url>/wqltyjcb.github.io/2023/03/27/Grad-CAM%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Grad-CAM-代码解析"><a href="#Grad-CAM-代码解析" class="headerlink" title="Grad-CAM 代码解析"></a>Grad-CAM 代码解析</h1><h2 id="main代码"><a href="#main代码" class="headerlink" title="main代码"></a>main代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> utils <span class="hljs-keyword">import</span> GradCAM, show_cam_on_image, center_crop_img<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 选择model</span><br>    model = models.mobilenet_v3_large(pretrained=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 选择需要CAM的layer</span><br>    target_layers = [model.features[-<span class="hljs-number">1</span>]]<br><br>    <span class="hljs-comment"># model = models.vgg16(pretrained=True)</span><br>    <span class="hljs-comment"># target_layers = [model.features]</span><br><br>    <span class="hljs-comment"># model = models.resnet34(pretrained=True)</span><br>    <span class="hljs-comment"># target_layers = [model.layer4]</span><br><br>    <span class="hljs-comment"># model = models.regnet_y_800mf(pretrained=True)</span><br>    <span class="hljs-comment"># target_layers = [model.trunk_output]</span><br><br>    <span class="hljs-comment"># model = models.efficientnet_b0(pretrained=True)</span><br>    <span class="hljs-comment"># target_layers = [model.features]</span><br><br>    data_transform = transforms.Compose([transforms.ToTensor(),<br>                                         transforms.Normalize([<span class="hljs-number">0.485</span>, <span class="hljs-number">0.456</span>, <span class="hljs-number">0.406</span>], [<span class="hljs-number">0.229</span>, <span class="hljs-number">0.224</span>, <span class="hljs-number">0.225</span>])])<br>    <span class="hljs-comment"># load image</span><br>    img_path = <span class="hljs-string">&quot;avatar.png&quot;</span><br>    <span class="hljs-keyword">assert</span> os.path.exists(img_path), <span class="hljs-string">&quot;file: &#x27;&#123;&#125;&#x27; dose not exist.&quot;</span>.<span class="hljs-built_in">format</span>(img_path)<br>    img = Image.<span class="hljs-built_in">open</span>(img_path).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>    img = np.array(img, dtype=np.uint8)<br>    <span class="hljs-comment"># img = center_crop_img(img, 224)</span><br><br>    <span class="hljs-comment"># [C, H, W]</span><br>    img_tensor = data_transform(img)<br>    <span class="hljs-comment"># expand batch dimension</span><br>    <span class="hljs-comment"># [C, H, W] -&gt; [N, C, H, W]</span><br>    input_tensor = torch.unsqueeze(img_tensor, dim=<span class="hljs-number">0</span>)<br><br>    cam = GradCAM(model=model, target_layers=target_layers, use_cuda=<span class="hljs-literal">False</span>)<br>    target_category = <span class="hljs-number">281</span>  <span class="hljs-comment"># tabby, tabby cat</span><br>    <span class="hljs-comment"># target_category = 254  # pug, pug-dog</span><br><br>    grayscale_cam = cam(input_tensor=input_tensor, target_category=target_category)<br><br>    <span class="hljs-comment"># 取出来是[batch_size,feature map]，这里是一张照片，所以取出第一个</span><br>    grayscale_cam = grayscale_cam[<span class="hljs-number">0</span>, :]<br>    <span class="hljs-comment"># 对CAM后的图还原到之前的size的RGB图像</span><br>    visualization = show_cam_on_image(img.astype(dtype=np.float32) / <span class="hljs-number">255.</span>,<br>                                      grayscale_cam,<br>                                      use_rgb=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 展示图像</span><br>    plt.imshow(visualization)<br>    plt.show()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="utils代码"><a href="#utils代码" class="headerlink" title="utils代码"></a>utils代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivationsAndGradients</span>:<br>    <span class="hljs-string">&quot;&quot;&quot; Class for extracting activations and</span><br><span class="hljs-string">    registering gradients from targeted intermediate layers &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, model, target_layers, reshape_transform</span>):<br>        self.model = model<br>        self.gradients = []<br>        self.activations = []<br>        self.reshape_transform = reshape_transform<br>        self.handles = []<br>        <span class="hljs-comment"># 对需要检测的目标层，可能包含多层，当作一个layer list</span><br>        <span class="hljs-keyword">for</span> target_layer <span class="hljs-keyword">in</span> target_layers:<br>            <span class="hljs-comment"># forward里面使用hook函数，通过调用save_activation函数 将当前层的结果放到 上面自定义的activations列表中</span><br>            self.handles.append(<br>                target_layer.register_forward_hook(<br>                    self.save_activation))<br>            <span class="hljs-comment"># Backward compatibility with older pytorch versions:</span><br>            <span class="hljs-comment"># 新版本有 register_full_backward_hook 这个方法；老版本使用register_backward_hook这个方法</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(target_layer, <span class="hljs-string">&#x27;register_full_backward_hook&#x27;</span>):<br>                self.handles.append(<br>                    target_layer.register_full_backward_hook(<br>                        self.save_gradient))<br>            <span class="hljs-keyword">else</span>:<br>                self.handles.append(<br>                    target_layer.register_backward_hook(<br>                        self.save_gradient))<br>    <span class="hljs-comment"># 正向传播后经过activation function之后的结果</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save_activation</span>(<span class="hljs-params">self, module, <span class="hljs-built_in">input</span>, output</span>):<br>        activation = output<br>        <span class="hljs-keyword">if</span> self.reshape_transform <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            activation = self.reshape_transform(activation)<br>        self.activations.append(activation.cpu().detach())<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save_gradient</span>(<span class="hljs-params">self, module, grad_input, grad_output</span>):<br>        <span class="hljs-comment"># Gradients are computed in reverse order</span><br>        grad = grad_output[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> self.reshape_transform <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            grad = self.reshape_transform(grad)<br>        self.gradients = [grad.cpu().detach()] + self.gradients<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># 清零梯度和正向传播</span><br>        self.gradients = []<br>        self.activations = []<br>        <span class="hljs-keyword">return</span> self.model(x)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">release</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> handle <span class="hljs-keyword">in</span> self.handles:<br>            handle.remove()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GradCAM</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 model,</span><br><span class="hljs-params">                 target_layers,</span><br><span class="hljs-params">                 reshape_transform=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 use_cuda=<span class="hljs-literal">False</span></span>):<br>        self.model = model.<span class="hljs-built_in">eval</span>()<br>        self.target_layers = target_layers<br>        self.reshape_transform = reshape_transform<br>        self.cuda = use_cuda<br>        <span class="hljs-keyword">if</span> self.cuda:<br>            self.model = model.cuda()<br>        self.activations_and_grads = ActivationsAndGradients(<br>            self.model, target_layers, reshape_transform)<br><br>    <span class="hljs-string">&quot;&quot;&quot; Get a vector of weights for every channel in the target layer.</span><br><span class="hljs-string">        Methods that return weights channels,</span><br><span class="hljs-string">        will typically need to only implement this function. &quot;&quot;&quot;</span><br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cam_weights</span>(<span class="hljs-params">grads</span>):<br>        <span class="hljs-keyword">return</span> np.mean(grads, axis=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), keepdims=<span class="hljs-literal">True</span>)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_loss</span>(<span class="hljs-params">output, target_category</span>):<br>        loss = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(target_category)):<br>            loss = loss + output[i, target_category[i]]<br>        <span class="hljs-keyword">return</span> loss<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cam_image</span>(<span class="hljs-params">self, activations, grads</span>):<br>        weights = self.get_cam_weights(grads)<br>        weighted_activations = weights * activations<br>        cam = weighted_activations.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> cam<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_target_width_height</span>(<span class="hljs-params">input_tensor</span>):<br>        width, height = input_tensor.size(-<span class="hljs-number">1</span>), input_tensor.size(-<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> width, height<br><br>    <span class="hljs-comment"># 通过 self.activations_and_grads 获取对应layers需要的forward和backward参数以计算cam</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_cam_per_layer</span>(<span class="hljs-params">self, input_tensor</span>):<br>        activations_list = [a.cpu().data.numpy() <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> self.activations_and_grads.activations]<br>        grads_list = [g.cpu().data.numpy() <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> self.activations_and_grads.gradients]<br>        target_size = self.get_target_width_height(input_tensor)<br><br>        cam_per_target_layer = []<br>        <span class="hljs-comment"># Loop over the saliency image from every layer</span><br><br>        <span class="hljs-keyword">for</span> layer_activations, layer_grads <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(activations_list, grads_list):<br>            cam = self.get_cam_image(layer_activations, layer_grads)<br>            cam[cam &lt; <span class="hljs-number">0</span>] = <span class="hljs-number">0</span>  <span class="hljs-comment"># works like mute the min-max scale in the function of scale_cam_image</span><br>            scaled = self.scale_cam_image(cam, target_size)<br>            cam_per_target_layer.append(scaled[:, <span class="hljs-literal">None</span>, :])<br><br>        <span class="hljs-keyword">return</span> cam_per_target_layer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">aggregate_multi_layers</span>(<span class="hljs-params">self, cam_per_target_layer</span>):<br>        cam_per_target_layer = np.concatenate(cam_per_target_layer, axis=<span class="hljs-number">1</span>)<br>        cam_per_target_layer = np.maximum(cam_per_target_layer, <span class="hljs-number">0</span>)<br>        result = np.mean(cam_per_target_layer, axis=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> self.scale_cam_image(result)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">scale_cam_image</span>(<span class="hljs-params">cam, target_size=<span class="hljs-literal">None</span></span>):<br>        result = []<br>        <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> cam:<br>            img = img - np.<span class="hljs-built_in">min</span>(img)<br>            img = img / (<span class="hljs-number">1e-7</span> + np.<span class="hljs-built_in">max</span>(img))<br>            <span class="hljs-keyword">if</span> target_size <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                img = cv2.resize(img, target_size)<br>            result.append(img)<br>        result = np.float32(result)<br><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, input_tensor, target_category=<span class="hljs-literal">None</span></span>):<br><br>        <span class="hljs-keyword">if</span> self.cuda:<br>            input_tensor = input_tensor.cuda()<br><br>        <span class="hljs-comment"># 正向传播得到网络输出logits(未经过softmax)</span><br>        output = self.activations_and_grads(input_tensor)<br>        <span class="hljs-comment"># 这个int指的是类的对应序号，在imagenet1k_classes.txt/imagenet21k.txt</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(target_category, <span class="hljs-built_in">int</span>):<br>            target_category = [target_category] * input_tensor.size(<span class="hljs-number">0</span>)<br><br>        <span class="hljs-comment"># 如果没有选择想要查找的类，那么找得分最高的类</span><br>        <span class="hljs-keyword">if</span> target_category <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            target_category = np.argmax(output.cpu().data.numpy(), axis=-<span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;category id: <span class="hljs-subst">&#123;target_category&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">assert</span> (<span class="hljs-built_in">len</span>(target_category) == input_tensor.size(<span class="hljs-number">0</span>))<br><br>        self.model.zero_grad()<br>        loss = self.get_loss(output, target_category)<br>        loss.backward(retain_graph=<span class="hljs-literal">True</span>)<br><br>        cam_per_layer = self.compute_cam_per_layer(input_tensor)<br>        <span class="hljs-comment"># 合并找的所有层</span><br>        <span class="hljs-keyword">return</span> self.aggregate_multi_layers(cam_per_layer)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        self.activations_and_grads.release()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_value, exc_tb</span>):<br>        self.activations_and_grads.release()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(exc_value, IndexError):<br>            <span class="hljs-comment"># Handle IndexError here...</span><br>            <span class="hljs-built_in">print</span>(<br>                <span class="hljs-string">f&quot;An exception occurred in CAM with block: <span class="hljs-subst">&#123;exc_type&#125;</span>. Message: <span class="hljs-subst">&#123;exc_value&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_cam_on_image</span>(<span class="hljs-params">img: np.ndarray,</span><br><span class="hljs-params">                      mask: np.ndarray,</span><br><span class="hljs-params">                      use_rgb: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params">                      colormap: <span class="hljs-built_in">int</span> = cv2.COLORMAP_JET</span>) -&gt; np.ndarray:<br>    <span class="hljs-string">&quot;&quot;&quot; This function overlays the cam mask on the image as an heatmap.</span><br><span class="hljs-string">    By default the heatmap is in BGR format.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param img: The base image in RGB or BGR format.</span><br><span class="hljs-string">    :param mask: The cam mask.</span><br><span class="hljs-string">    :param use_rgb: Whether to use an RGB or BGR heatmap, this should be set to True if &#x27;img&#x27; is in RGB format.</span><br><span class="hljs-string">    :param colormap: The OpenCV colormap to be used.</span><br><span class="hljs-string">    :returns: The default image with the cam overlay.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    heatmap = cv2.applyColorMap(np.uint8(<span class="hljs-number">255</span> * mask), colormap)<br>    <span class="hljs-keyword">if</span> use_rgb:<br>        heatmap = cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)<br>    heatmap = np.float32(heatmap) / <span class="hljs-number">255</span><br><br>    <span class="hljs-keyword">if</span> np.<span class="hljs-built_in">max</span>(img) &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<br>            <span class="hljs-string">&quot;The input image should np.float32 in the range [0, 1]&quot;</span>)<br><br>    cam = heatmap + img<br>    cam = cam / np.<span class="hljs-built_in">max</span>(cam)<br>    <span class="hljs-keyword">return</span> np.uint8(<span class="hljs-number">255</span> * cam)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">center_crop_img</span>(<span class="hljs-params">img: np.ndarray, size: <span class="hljs-built_in">int</span></span>):<br>    h, w, c = img.shape<br><br>    <span class="hljs-keyword">if</span> w == h == size:<br>        <span class="hljs-keyword">return</span> img<br><br>    <span class="hljs-keyword">if</span> w &lt; h:<br>        ratio = size / w<br>        new_w = size<br>        new_h = <span class="hljs-built_in">int</span>(h * ratio)<br>    <span class="hljs-keyword">else</span>:<br>        ratio = size / h<br>        new_h = size<br>        new_w = <span class="hljs-built_in">int</span>(w * ratio)<br><br>    img = cv2.resize(img, dsize=(new_w, new_h))<br><br>    <span class="hljs-keyword">if</span> new_w == size:<br>        h = (new_h - size) // <span class="hljs-number">2</span><br>        img = img[h: h+size]<br>    <span class="hljs-keyword">else</span>:<br>        w = (new_w - size) // <span class="hljs-number">2</span><br>        img = img[:, w: w+size]<br><br>    <span class="hljs-keyword">return</span> img<br></code></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="step1-选择需要的模型"><a href="#step1-选择需要的模型" class="headerlink" title="step1 选择需要的模型"></a>step1 选择需要的模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">pretrained 设置为<span class="hljs-literal">True</span>表示载入提前训练好的模型参数<br>model = models.mobilenet_v3_large(pretrained=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 也可以选择训练别的模型</span><br><span class="hljs-comment"># model = models.vgg16(pretrained=True)</span><br><span class="hljs-comment"># target_layers = [model.features]</span><br><br><span class="hljs-comment"># model = models.resnet34(pretrained=True)</span><br><span class="hljs-comment"># target_layers = [model.layer4]</span><br><br><span class="hljs-comment"># model = models.regnet_y_800mf(pretrained=True)</span><br><span class="hljs-comment"># target_layers = [model.trunk_output]</span><br><br><span class="hljs-comment"># model = models.efficientnet_b0(pretrained=True)</span><br><span class="hljs-comment"># target_layers = [model.features]</span><br></code></pre></td></tr></table></figure><h3 id="step2-选择需要做CAM的laywer-list"><a href="#step2-选择需要做CAM的laywer-list" class="headerlink" title="step2 选择需要做CAM的laywer list"></a>step2 选择需要做CAM的laywer list</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">target_layers = [model.features[-<span class="hljs-number">1</span>]]<br></code></pre></td></tr></table></figure><h3 id="step3-设置图像处理的方法"><a href="#step3-设置图像处理的方法" class="headerlink" title="step3 设置图像处理的方法"></a>step3 设置图像处理的方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">data_transform = transforms.Compose([transforms.ToTensor(),<br>                                         transforms.Normalize([<span class="hljs-number">0.485</span>, <span class="hljs-number">0.456</span>, <span class="hljs-number">0.406</span>], [<span class="hljs-number">0.229</span>, <span class="hljs-number">0.224</span>, <span class="hljs-number">0.225</span>])])<br></code></pre></td></tr></table></figure><h3 id="step-4预处理图像"><a href="#step-4预处理图像" class="headerlink" title="step 4预处理图像"></a>step 4预处理图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># load image</span><br>img_path = <span class="hljs-string">&quot;avatar.png&quot;</span><br><span class="hljs-keyword">assert</span> os.path.exists(img_path), <span class="hljs-string">&quot;file: &#x27;&#123;&#125;&#x27; dose not exist.&quot;</span>.<span class="hljs-built_in">format</span>(img_path)<br>img = Image.<span class="hljs-built_in">open</span>(img_path).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>img = np.array(img, dtype=np.uint8)<br><br><span class="hljs-comment"># [C, H, W]</span><br>img_tensor = data_transform(img)<br><span class="hljs-comment"># expand batch dimension</span><br><span class="hljs-comment"># [C, H, W] -&gt; [N, C, H, W] 增加一个batch维度</span><br>input_tensor = torch.unsqueeze(img_tensor, dim=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="step5-GradCAM函数初始化"><a href="#step5-GradCAM函数初始化" class="headerlink" title="step5 GradCAM函数初始化"></a>step5 GradCAM函数初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cam = GradCAM(model=model, target_layers=target_layers, use_cuda=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>看一看GradCAM函数初始化代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GradCAM</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 model,</span><br><span class="hljs-params">                 target_layers,</span><br><span class="hljs-params">                 reshape_transform=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 use_cuda=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-comment"># 初始化一些参数</span><br>        self.model = model.<span class="hljs-built_in">eval</span>()<br>        self.target_layers = target_layers<br>        self.reshape_transform = reshape_transform<br>        self.cuda = use_cuda<br>        <span class="hljs-comment"># 是否使用GPU</span><br>        <span class="hljs-keyword">if</span> self.cuda:<br>            self.model = model.cuda()<br>        self.activations_and_grads = ActivationsAndGradients(<br>            self.model, target_layers, reshape_transform)<br></code></pre></td></tr></table></figure><p>执行到<code>self.activations_and_grads = ActivationsAndGradients(             self.model, target_layers, reshape_transform)</code>这一步时调用</p><h4 id="ActivationsAndGradients类"><a href="#ActivationsAndGradients类" class="headerlink" title="ActivationsAndGradients类"></a><code>ActivationsAndGradients</code>类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivationsAndGradients</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, model, target_layers, reshape_transform</span>):<br>        self.model = model<br>        self.gradients = []<br>        self.activations = []<br>        self.reshape_transform = reshape_transform<br>        self.handles = []<br>        <span class="hljs-comment"># 对需要检测的目标层，可能包含多层，当作一个layer list</span><br>        <span class="hljs-keyword">for</span> target_layer <span class="hljs-keyword">in</span> target_layers:<br>            <span class="hljs-comment"># forward里面使用hook函数，通过调用save_activation函数 将当前层的结果放到 上面自定义的activations列表中</span><br>            self.handles.append(<br>                target_layer.register_forward_hook(<br>                    self.save_activation))<br>            <span class="hljs-comment"># Backward compatibility with older pytorch versions:</span><br>            <span class="hljs-comment"># 新版本有 register_full_backward_hook 这个方法；老版本使用register_backward_hook这个方法</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(target_layer, <span class="hljs-string">&#x27;register_full_backward_hook&#x27;</span>):<br>                self.handles.append(<br>                    target_layer.register_full_backward_hook(<br>                        self.save_gradient))<br>            <span class="hljs-keyword">else</span>:<br>                self.handles.append(<br>                    target_layer.register_backward_hook(<br>                        self.save_gradient))<br>    <span class="hljs-comment"># 正向传播后经过activation function之后的结果</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save_activation</span>(<span class="hljs-params">self, module, <span class="hljs-built_in">input</span>, output</span>):<br>        activation = output<br>        <span class="hljs-keyword">if</span> self.reshape_transform <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            activation = self.reshape_transform(activation)<br>        self.activations.append(activation.cpu().detach())<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save_gradient</span>(<span class="hljs-params">self, module, grad_input, grad_output</span>):<br>        <span class="hljs-comment"># Gradients are computed in reverse order</span><br>        grad = grad_output[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> self.reshape_transform <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            grad = self.reshape_transform(grad)<br>        self.gradients = [grad.cpu().detach()] + self.gradients<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># 清零梯度和正向传播</span><br>        self.gradients = []<br>        self.activations = []<br>        <span class="hljs-keyword">return</span> self.model(x)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">release</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> handle <span class="hljs-keyword">in</span> self.handles:<br>            handle.remove()<br></code></pre></td></tr></table></figure><p>上面这个类中描述了如何保存目标层的正向传播和反向传播代码。</p><p><code>register_forward_hook</code>和<code>register_full_backward_hook</code>。</p><h4 id="钩子函数（hook-function）"><a href="#钩子函数（hook-function）" class="headerlink" title="钩子函数（hook function）"></a><strong>钩子函数（hook function）</strong></h4><p>像一个挂钩，在有需要的时候挂一个东西上去。钩子函数是我们自己实现的，挂接到目标挂载点上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># forward</span><br><br>target_layer.register_forward_hook(self.save_activation)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_activation</span>(<span class="hljs-params">self, module, <span class="hljs-built_in">input</span>, output</span>):<br>        activation = output<br>        <span class="hljs-keyword">if</span> self.reshape_transform <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            activation = self.reshape_transform(activation)<br>        self.activations.append(activation.cpu().detach())<br><br><span class="hljs-comment"># backward</span><br>target_layer.register_full_backward_hook(self.save_gradient)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_gradient</span>(<span class="hljs-params">self, module, grad_input, grad_output</span>):<br>        <span class="hljs-comment"># Gradients are computed in reverse order</span><br>        grad = grad_output[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> self.reshape_transform <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            grad = self.reshape_transform(grad)<br>        self.gradients = [grad.cpu().detach()] + self.gradients<br></code></pre></td></tr></table></figure><p>对layer list里面的每一层layer，我们都计算了正向传播结果out和反向传播时的梯度gradient。为什么需要这样做呢？</p><p>由于pytorhc的自动求导机制，即当设置参数的 <code>requires_grad=True</code>时，那么涉及这组参数的一系列操作将会被<code>autograd</code>记录用以反向求导。但是<strong>在自动求导机制中只保存叶子节点，也就是中间变量在计算完成梯度后会自动释放以节省空间</strong>。</p><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.tensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],dtype=torch.float32,requires_grad=<span class="hljs-literal">True</span>)<br>y = x * <span class="hljs-number">2</span><br>z = torch.mean(y)<br>z.backward()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x.grad =&quot;</span>, x.grad)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y.grad =&quot;</span>, y.grad)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;z.grad =&quot;</span>, z.grad)<br><br><br>result:<br>x.grad = tensor([<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>])<br>y.grad = <span class="hljs-literal">None</span><br>z.grad = <span class="hljs-literal">None</span><br><br></code></pre></td></tr></table></figure><p>从上面可以看出在做forward或是backward的时候，我们需要的某一中间层的一系列参数(output 和 gradient)是释放了的。</p><h3 id="step6-选取要检测的类别以及GradCAM类的执行"><a href="#step6-选取要检测的类别以及GradCAM类的执行" class="headerlink" title="step6 选取要检测的类别以及GradCAM类的执行"></a>step6 选取要检测的类别以及GradCAM类的执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">target_category = <span class="hljs-number">281</span>  <span class="hljs-comment"># tabby, tabby cat</span><br>    <span class="hljs-comment"># target_category = 254  # pug, pug-dog</span><br><br>grayscale_cam = cam(input_tensor=input_tensor, target_category=target_category)<br></code></pre></td></tr></table></figure><p>关于类281,如下图：（index从0开始），这是一个包含1k个类的编号txt文件</p><p><img src="/wqltyjcb.github.io/./assets/picc.png" alt="picc"></p><p>然后看看cam如何执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, input_tensor, target_category=<span class="hljs-literal">None</span></span>):<br><br>    <span class="hljs-keyword">if</span> self.cuda:<br>        input_tensor = input_tensor.cuda()<br><br>    <span class="hljs-comment"># 正向传播得到网络输出logits(未经过softmax)</span><br>    <span class="hljs-comment"># 这里activations_and_grads上面已经解释过了</span><br>    output = self.activations_and_grads(input_tensor)<br>    <span class="hljs-comment"># 这个int指的是类的对应序号，在imagenet1k_classes.txt/imagenet21k.txt</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(target_category, <span class="hljs-built_in">int</span>):<br>        target_category = [target_category] * input_tensor.size(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment"># 如果没有选择想要查找的类，那么找得分最高的类</span><br>    <span class="hljs-keyword">if</span> target_category <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        target_category = np.argmax(output.cpu().data.numpy(), axis=-<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;category id: <span class="hljs-subst">&#123;target_category&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">assert</span> (<span class="hljs-built_in">len</span>(target_category) == input_tensor.size(<span class="hljs-number">0</span>))<br><br>    self.model.zero_grad()<br>    <span class="hljs-comment"># 计算损失</span><br>    loss = self.get_loss(output, target_category)<br>    loss.backward(retain_graph=<span class="hljs-literal">True</span>)<br><br>    cam_per_layer = self.compute_cam_per_layer(input_tensor)<br>    <span class="hljs-comment"># 合并找的所有层</span><br>    <span class="hljs-keyword">return</span> self.aggregate_multi_layers(cam_per_layer)<br></code></pre></td></tr></table></figure><p>补充一下<code>compute_cam_per_layer</code>函数，通过 self.activations_and_grads 获取对应layers需要的forward和backward参数以计算layer list里面所有layer的cam并叠加到一起然后返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_cam_per_layer</span>(<span class="hljs-params">self, input_tensor</span>):<br>    activations_list = [a.cpu().data.numpy() <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> self.activations_and_grads.activations]<br>    grads_list = [g.cpu().data.numpy() <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> self.activations_and_grads.gradients]<br>    target_size = self.get_target_width_height(input_tensor)<br><br>    cam_per_target_layer = []<br>    <span class="hljs-comment"># Loop over the saliency image from every layer</span><br><br>    <span class="hljs-keyword">for</span> layer_activations, layer_grads <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(activations_list, grads_list):<br>        cam = self.get_cam_image(layer_activations, layer_grads)<br>        cam[cam &lt; <span class="hljs-number">0</span>] = <span class="hljs-number">0</span>  <span class="hljs-comment"># works like mute the min-max scale in the function of scale_cam_image</span><br>        scaled = self.scale_cam_image(cam, target_size)<br>        cam_per_target_layer.append(scaled[:, <span class="hljs-literal">None</span>, :])<br><br>    <span class="hljs-keyword">return</span> cam_per_target_layer<br></code></pre></td></tr></table></figure><h3 id="step7-取出并展示图片"><a href="#step7-取出并展示图片" class="headerlink" title="step7 取出并展示图片"></a>step7 取出并展示图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 取出来是[batch_size,feature map]，这里是一张照片，所以取出第一个</span><br>    grayscale_cam = grayscale_cam[<span class="hljs-number">0</span>, :]<br>    <span class="hljs-comment"># 对CAM后的图还原到之前的size的RGB图像</span><br>    visualization = show_cam_on_image(img.astype(dtype=np.float32) / <span class="hljs-number">255.</span>,<br>                                      grayscale_cam,<br>                                      use_rgb=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 展示图像</span><br>    plt.imshow(visualization)<br>    plt.show()<br></code></pre></td></tr></table></figure><p>参考资料：</p><p>1.Code：<a href="https://github.com/WZMIAOMIAO/deep-learning-for-image-processing/tree/master/pytorch_classification/grad_cam">https://github.com/WZMIAOMIAO/deep-learning-for-image-processing/tree/master/pytorch_classification/grad_cam</a></p><p>2.Video：<a href="https://b23.tv/n1e60vN">https://b23.tv/n1e60vN</a></p><p>PS: 资料来自我的B站导师<code>霹雳吧啦Wz</code>，他讲解很好但是我认为需要一定基础才可以跟上，不然就跟我一样需要看很多遍查很多函数。作为小白中的小白，我用debug一行一行执行然后写出了大部分的解析和逻辑。希望可以帮助到跟我一样的小白！</p><p>转发请著名原处</p>]]></content>
    
    
    
    <tags>
      
      <tag>类激活图，CNN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/wqltyjcb.github.io/2023/03/17/hello-world/"/>
    <url>/wqltyjcb.github.io/2023/03/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
